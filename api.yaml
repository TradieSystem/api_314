openapi: 3.0.0
info:
  title: HomeServices API
  description: A cross reference for front-to-back end development
  version: 1.0.0
servers:
  - url: https://homeservices.com/api
  

paths:
  /user/validate:
    get:
      summary: Check if user exists before signup
      description: Check if user exists before signup
      parameters:
        - name: email
          in: query
          description: users email address
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: User not found
          content:
            application/json:
              schema:
                properties:
                  exists:
                    type: boolean
        '417':
          description: User already exists
          content:
            application/json:
              schema:
                properties:
                  exists:
                    type: boolean
                  pbkey:
                    type: string
          
  /user/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token by providing a refresh token
      security:
        - bearerAuth: []
      parameters:
        - name: refresh_token
          in: query
          required: true
          description: Refresh token received during auth
          schema:
            type: object
            properties:
              refresh_token:
                type: string
      responses:
        '200':
          description: New access token and refresh token are sent to user
        '400':
          description: Invalid or expired refresh token
          
  /user/userCreate:
    post:
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGet'
      responses:
        default:
          description: The operation was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
                
  /user/login:
    post:
      summary: User login
      description: User login
      security:
        - bearerAuth: []
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: users email address
          required: true
          schema:
            type: string
            format: email
        - name: password
          in: query
          description: users password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAuth'
        '400':
          description: Invalid username or password
          
  /user/updateUser:
    put:
      summary: Update user information
      description: A logged in user may update their profile information
      operationId: updateUser
      requestBody:
        description: Update existing user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGet'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
        '401':
          description: Invalid input
          
  /user/resetPassword: # Reworked ResetPassword to allow for three different methods on the endpoint
    get:
      summary: For resetting user password, request challenges to pass
      description: Reset the users forgotten password using email + sec qns
      operationId: resetPassword_get
      parameters:
        - name: email
          in: query
          description: users email address
          required: true
          schema:
            type: string
            format: email      
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassword'
          description: User found
        '404':
          description: User not found
    post:
      summary: For resetting user password, provide correct answers to continue
      description: Reset the users forgotten password using email + sec qns
      operationId: resetPassword_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
          description: Correct answers provided
        '406':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
          description: Incorrect answers provided

    put:
      summary: Reset the users forgotten password
      description: Reset the users forgotten password using email + sec qns
      operationId: resetPassword_put
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          description: Password has been reset
  
  /serviceRequest/{application}:
    post:
      summary: service request information
      description: submit a new application form from customer
      parameters:
        - name: application
          in: path
          description: application data
          required: true
          schema:
            $ref: '#/components/schemas/ServiceRequest'
      responses:
        '201':
          description: The form has been submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRequest'
        '401':
          description: application could not be submitted
          
        
components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        description: Authentication token for obtaining tokens
        
      basicAuth:
        type: http
        scheme: bearer
        description: Authentication token for requests  

  schemas:
    UserGet: # this will be the same as userSignUP because they require the same fields
      type: object
      properties:
        user_id:
          type: integer #is this only going to be an integer?
          example: 1
        firstName:
          type: string
          example: Snoop
        lastName:
          type: string
          example: Dogg
        email:
          type: string
          format: email
          example: myemail@email.com
        password:
          type: string
          example: myPassword123!!
        mobile:
          type: string
          pattern: '^\d{10}$'
        address:
          $ref: '#/components/schemas/Address'
        client:
          $ref: '#/components/schemas/Client'
        professional:
          $ref: '#/components/schemas/Professional'
        CCout:
          $ref: '#/components/schemas/CreditCard'
        securityQuestions:
          $ref: '#/components/schemas/SecurityQuestions'
          
    Address:
      type: object
      properties:
        streetname:
          type: string
          example: Sesame Street
        streetnumber:
          type: integer
          example: 7
        suburb:
          type: string
          example: Liverpool
        postcode:
          type: string
          example: 2170
      required:
        - streetname
        - streetnumber
        - suburb
        - postcode
        
    CreditCard:
      type: object
      properties:
        CCname:
          type: string
          example: John
        CCnumber:
          type: string
          pattern: ^[0-9]{16}$
          example: 1234 5678 9123 456
        CCsecurity:
          type: string
          pattern: ^[0-9]{3}$
          example: 123
          
    MembershipType:
      type: string
      enum:
        - Subscription
        - Pay on demand
    UserType:
      type: string
      enum:
        - Client
        - Professional
    Client: ##will have to ask ben about this
      type: object
      properties:
        membership:
          $ref: '#/components/schemas/MembershipType'
          
    Professional: ##will have to ask ben about this
      type: object
      properties: 
        services: # <-- will have to discuss this with Matt or Ben
          type: array
          items:
            $ref: '#/components/schemas/ProfessionalServices'
        CCin:
          $ref: '#/components/schemas/CreditCard'
          
    ResetPassword:
      type: object
      properties:
        email:
          type: string
          description: The User_id that will be used for updating password
          example: '123'
        securityquestions:
          $ref: '#/components/schemas/SecurityQuestions'
          
    ProfessionalServices:
      type: string
      enum:
        - TREE_REMOVAL
        - ROOF_CLEANING
        - FENCE_INSTALLATION
        - OVEN_REPAIRS
        - PLUMBING
      description: > 
        * 'TREE_REMOVAL': Tree Removal
        * 'ROOF_CLEANING': Roof Cleaning
        * 'FENCE_INSTALLATION: Fence Installation
        * 'OVEN_REPAIRS': Oven Repairs
        * 'PLUMBING': Plumbing
        
    SecurityQuestions:
      type: object
      properties:
        securityQuestion1:
          $ref: '#/components/schemas/SecurityQuestion'
        securityQuestion2:
          $ref: '#/components/schemas/SecurityQuestion'
        securityQuestion3:
          $ref: '#/components/schemas/SecurityQuestion'     
          
    SecurityQuestion:
      type: object
      properties:
        securityQuestion:
          type: string
          enum:
            - CAR
            - STREET
            - PET
            - BORN
            - NICKNAME
          description: >
            * 'CAR': What was your first car?
            * 'STREET': What was the name of the first street you lived on?
            * 'PET': What was the name of your first pet?
            * 'NICKNAME': What aws your childhood nickname?
        answer:
          type: string
          example: "Car"  
            
    Customer:
      type: object
      description: customer location information
      properties:
        userID:
          type: integer
          description: customers ID
        firstname: 
          type: string
          description: customer first name
        lastname: 
          type: string  
          description: customer last name
        email:
          type: string
          description: customer email
        mobile:
          type: string
          description: customer phone number
        address:
          $ref: '#/components/schemas/Address'
        usertype:
          $ref: '#/components/schemas/UserType'
          
    ServiceRequest:
      type: object
      properties:
        applicationNumber:
          type: integer
          description: unique identifier for service request
        applicationCreatedDate:
          type: string
          description: The date the service request was created
          format: MM/DD/YYYY
        serviceType:
          type: string
          description: the service type
        requestStatus:
          type: string
          description: The status of the request
        customerinfo:
          $ref: '#/components/schemas/Customer'
        totalcost:
          type: integer
          description: the total cost of the service request
        billing:
          $ref: '#/components/schemas/CreditCard'
        jobdescription:
          type: string
          description: Job description
        
    ResponseAuth:
      type: object
      properties:
        accesstoken:
          $ref: '#/components/schemas/AccessToken'
        refreshtoken:
          $ref: '#/components/schemas/RefreshToken'
      required:
        - accesstoken
        - refreshtoken
    
    RefreshToken: #userID+expiry needs to properties of both tokens since they will be treated separately
      type: object
      properties:
        refreshtoken:
          type: string
          description: Token required for reauthorisation 
        userID:
          type: string
          description: The user associated with this token
        expiry:
          type: string
          description: Value that dictates when the token is expired/invalidated
          
    AccessToken: #userID+expiry needs to properties of both tokens since they will be treated separately
      type: object
      properties:
        accesstoken:
          type: string
          description: Token required for querying resources server, obtained on authorizaiton
        userID:
          type: string
          description: The user associated with this token
        expiry:
          type: string
          description: Value that dictates when the token is expired/invalidated
    